SHELL := sh
CXX := g++
CXXFLAGS := -std=c++20 -O2 -Iinclude -MMD -MP

SRC_DIR := src
BUILD_DIR := build
BIN_DIR := $(SRC_DIR)/bin

# Find all .cpp sources recursively
SRCS := $(wildcard $(SRC_DIR)/**/*.cpp)

# Corresponding object files under build/
OBJS := $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/%.cpp.o, $(SRCS))

# Dependency files
DEPS := $(OBJS:.o=.d)

# Shared sources = everything except src/bin/**
SHARED_SRCS := $(shell find $(SRC_DIR) -type f -name "*.cpp" ! -path "$(BIN_DIR)/*")
SHARED_OBJS := $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/%.cpp.o, $(SHARED_SRCS))

# Executables (1 per file or folder in src/bin)
BIN_FILES := $(wildcard $(BIN_DIR)/*.cpp)
BIN_FOLDERS := $(wildcard $(BIN_DIR)/*/)
EXE_NAMES := $(notdir $(basename $(BIN_FILES))) $(notdir $(basename $(BIN_FOLDERS)))
EXES := $(addprefix $(BUILD_DIR)/bin/, $(addsuffix .exe, $(EXE_NAMES)))

# Default target
all: $(EXES)

# --- Rules --------------------------------------------------------------

# Compile any .cpp -> .o, mirroring directory structure
$(BUILD_DIR)/%.cpp.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) -c $< -o $@
	@echo "Compiled $<"

# Single-file executables (src/bin/foo.cpp)
$(BUILD_DIR)/bin/%.exe: $(BIN_DIR)/%.cpp $(SHARED_OBJS)
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) $^ -o $@
	@echo "Linked $@"

# Folder-based executables (src/bin/foo/*.cpp)
$(BUILD_DIR)/bin/%.exe: $(SHARED_OBJS)
	@echo "Building folder-based binary $*..."
	$(eval FOLDER_SRCS := $(wildcard $(BIN_DIR)/$*/*.cpp))
	$(eval FOLDER_OBJS := $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/%.cpp.o, $(FOLDER_SRCS)))
	@mkdir -p $(dir $(FOLDER_OBJS))
	@$(CXX) $(CXXFLAGS) -c $(FOLDER_SRCS)
	@mkdir -p $(dir $@)
	@$(CXX) $(SHARED_OBJS) $(FOLDER_OBJS) -o $@
	@echo "Linked $@"


# Alias for individual executables
%: $(BUILD_DIR)/bin/%.exe

# Include dependency files (auto-generated by -MMD)
-include $(DEPS)

.PHONY: clean
clean:
	@echo "Cleaning..."
	@rm -rf $(BUILD_DIR)
